// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Relation;

namespace Relation.Migrations
{
    [DbContext(typeof(ExoDataContext))]
    partial class ExoDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Relation.Entities.Acteur", b =>
                {
                    b.Property<int>("ActeurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonneId")
                        .HasColumnType("int");

                    b.HasKey("ActeurId");

                    b.HasIndex("FilmId");

                    b.HasIndex("PersonneId");

                    b.ToTable("Acteur");

                    b.HasData(
                        new
                        {
                            ActeurId = 1,
                            FilmId = 1,
                            PersonneId = 3
                        },
                        new
                        {
                            ActeurId = 2,
                            FilmId = 1,
                            PersonneId = 4
                        },
                        new
                        {
                            ActeurId = 3,
                            FilmId = 1,
                            PersonneId = 5
                        },
                        new
                        {
                            ActeurId = 4,
                            FilmId = 2,
                            PersonneId = 3
                        },
                        new
                        {
                            ActeurId = 5,
                            FilmId = 2,
                            PersonneId = 4
                        },
                        new
                        {
                            ActeurId = 6,
                            FilmId = 2,
                            PersonneId = 5
                        },
                        new
                        {
                            ActeurId = 7,
                            FilmId = 3,
                            PersonneId = 3
                        },
                        new
                        {
                            ActeurId = 8,
                            FilmId = 3,
                            PersonneId = 4
                        },
                        new
                        {
                            ActeurId = 9,
                            FilmId = 3,
                            PersonneId = 5
                        },
                        new
                        {
                            ActeurId = 10,
                            FilmId = 4,
                            PersonneId = 1
                        },
                        new
                        {
                            ActeurId = 11,
                            FilmId = 4,
                            PersonneId = 2
                        },
                        new
                        {
                            ActeurId = 12,
                            FilmId = 5,
                            PersonneId = 1
                        },
                        new
                        {
                            ActeurId = 13,
                            FilmId = 5,
                            PersonneId = 6
                        },
                        new
                        {
                            ActeurId = 14,
                            FilmId = 5,
                            PersonneId = 7
                        },
                        new
                        {
                            ActeurId = 15,
                            FilmId = 6,
                            PersonneId = 1
                        },
                        new
                        {
                            ActeurId = 16,
                            FilmId = 6,
                            PersonneId = 6
                        },
                        new
                        {
                            ActeurId = 17,
                            FilmId = 6,
                            PersonneId = 7
                        },
                        new
                        {
                            ActeurId = 18,
                            FilmId = 7,
                            PersonneId = 1
                        },
                        new
                        {
                            ActeurId = 19,
                            FilmId = 7,
                            PersonneId = 6
                        },
                        new
                        {
                            ActeurId = 20,
                            FilmId = 7,
                            PersonneId = 7
                        });
                });

            modelBuilder.Entity("Relation.Entities.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Annee")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("PersonneId")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("FilmId");

                    b.HasIndex("PersonneId");

                    b.ToTable("Film");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            Annee = 1977,
                            Genre = "Science-Fiction",
                            PersonneId = 10,
                            Titre = "Star Wars : Un nouvel espoir"
                        },
                        new
                        {
                            FilmId = 2,
                            Annee = 1980,
                            Genre = "Science-Fiction",
                            PersonneId = 10,
                            Titre = "Star Wars : L'empire contre-attaque"
                        },
                        new
                        {
                            FilmId = 3,
                            Annee = 1983,
                            Genre = "Science-Fiction",
                            PersonneId = 10,
                            Titre = "Star Wars : Le retour du Jedi"
                        },
                        new
                        {
                            FilmId = 4,
                            Annee = 2005,
                            Genre = "Société",
                            PersonneId = 8,
                            Titre = "Hooligans"
                        },
                        new
                        {
                            FilmId = 5,
                            Annee = 2001,
                            Genre = "Heroic-Fantasy",
                            PersonneId = 9,
                            Titre = "LOTR - La communauté de l'anneau"
                        },
                        new
                        {
                            FilmId = 6,
                            Annee = 2002,
                            Genre = "Heroic-Fantasy",
                            PersonneId = 9,
                            Titre = "LOTR - Les deux tours"
                        },
                        new
                        {
                            FilmId = 7,
                            Annee = 2003,
                            Genre = "Heroic-Fantasy",
                            PersonneId = 9,
                            Titre = "LOTR - Le retour du roi"
                        });
                });

            modelBuilder.Entity("Relation.Entities.Personne", b =>
                {
                    b.Property<int>("PersonneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonneId");

                    b.ToTable("Personne");

                    b.HasData(
                        new
                        {
                            PersonneId = 1,
                            Nom = "Wood",
                            Prenom = "Elijah"
                        },
                        new
                        {
                            PersonneId = 2,
                            Nom = "Hunnam",
                            Prenom = "Charlie"
                        },
                        new
                        {
                            PersonneId = 3,
                            Nom = "Ford",
                            Prenom = "Harisson"
                        },
                        new
                        {
                            PersonneId = 4,
                            Nom = "Hammil",
                            Prenom = "Mark"
                        },
                        new
                        {
                            PersonneId = 5,
                            Nom = "Fisher",
                            Prenom = "Carrie"
                        },
                        new
                        {
                            PersonneId = 6,
                            Nom = "Mortensen",
                            Prenom = "Vigo"
                        },
                        new
                        {
                            PersonneId = 7,
                            Nom = "Bloom",
                            Prenom = "Orlando"
                        },
                        new
                        {
                            PersonneId = 8,
                            Nom = "Alexander",
                            Prenom = "Lexi"
                        },
                        new
                        {
                            PersonneId = 9,
                            Nom = "Jackson",
                            Prenom = "Peter"
                        },
                        new
                        {
                            PersonneId = 10,
                            Nom = "Lucas",
                            Prenom = "Georges"
                        });
                });

            modelBuilder.Entity("Relation.Entities.Acteur", b =>
                {
                    b.HasOne("Relation.Entities.Film", "MonFilm")
                        .WithMany("Casting")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Relation.Entities.Personne", "Personne")
                        .WithMany("Biographie")
                        .HasForeignKey("PersonneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Relation.Entities.Film", b =>
                {
                    b.HasOne("Relation.Entities.Personne", "Realisateur")
                        .WithMany()
                        .HasForeignKey("PersonneId");
                });
#pragma warning restore 612, 618
        }
    }
}
